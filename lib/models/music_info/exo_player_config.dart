import 'package:freezed_annotation/freezed_annotation.dart';

part 'exo_player_config.freezed.dart';
part 'exo_player_config.g.dart';

@freezed
class ExoPlayerConfig with _$ExoPlayerConfig {
  factory ExoPlayerConfig({
    bool? useExoPlayer,
    bool? useAdaptiveBitrate,
    int? maxInitialByteRate,
    int? minDurationForQualityIncreaseMs,
    int? maxDurationForQualityDecreaseMs,
    int? minDurationToRetainAfterDiscardMs,
    int? lowWatermarkMs,
    int? highWatermarkMs,
    double? lowPoolLoad,
    double? highPoolLoad,
    double? sufficientBandwidthOverhead,
    int? bufferChunkSizeKb,
    int? httpConnectTimeoutMs,
    int? httpReadTimeoutMs,
    int? numAudioSegmentsPerFetch,
    int? numVideoSegmentsPerFetch,
    int? minDurationForPlaybackStartMs,
    bool? enableExoplayerReuse,
    bool? useRadioTypeForInitialQualitySelection,
    bool? blacklistFormatOnError,
    bool? enableBandaidHttpDataSource,
    int? httpLoadTimeoutMs,
    bool? canPlayHdDrm,
    int? videoBufferSegmentCount,
    int? audioBufferSegmentCount,
    bool? useAbruptSplicing,
    int? minRetryCount,
    int? minChunksNeededToPreferOffline,
    int? secondsToMaxAggressiveness,
    bool? enableSurfaceviewResizeWorkaround,
    bool? enableVp9IfThresholdsPass,
    bool? matchQualityToViewportOnUnfullscreen,
    List<String>? lowAudioQualityConnTypes,
    bool? useDashForLiveStreams,
    bool? enableLibvpxVideoTrackRenderer,
    int? lowAudioQualityBandwidthThresholdBps,
    bool? enableVariableSpeedPlayback,
    bool? preferOnesieBufferedFormat,
    int? minimumBandwidthSampleBytes,
    bool? useDashForOtfAndCompletedLiveStreams,
    bool? disableCacheAwareVideoFormatEvaluation,
    bool? useLiveDvrForDashLiveStreams,
    bool? cronetResetTimeoutOnRedirects,
    bool? emitVideoDecoderChangeEvents,
    String? onesieVideoBufferLoadTimeoutMs,
    String? onesieVideoBufferReadTimeoutMs,
    bool? libvpxEnableGl,
    bool? enableVp9EncryptedIfThresholdsPass,
    bool? enableOpus,
    bool? usePredictedBuffer,
    int? maxReadAheadMediaTimeMs,
    bool? useMediaTimeCappedLoadControl,
    int? allowCacheOverrideToLowerQualitiesWithinRange,
    bool? allowDroppingUndecodedFrames,
    int? minDurationForPlaybackRestartMs,
    String? serverProvidedBandwidthHeader,
    String? liveOnlyPegStrategy,
    bool? enableRedirectorHostFallback,
    bool? enableHighlyAvailableFormatFallbackOnPcr,
    bool? recordTrackRendererTimingEvents,
    int? minErrorsForRedirectorHostFallback,
    List<String>? nonHardwareMediaCodecNames,
    bool? enableVp9IfInHardware,
    bool? enableVp9EncryptedIfInHardware,
    bool? useOpusMedAsLowQualityAudio,
    int? minErrorsForPcrFallback,
    bool? useStickyRedirectHttpDataSource,
    bool? onlyVideoBandwidth,
    bool? useRedirectorOnNetworkChange,
    bool? enableMaxReadaheadAbrThreshold,
    bool? cacheCheckDirectoryWritabilityOnce,
    String? predictorType,
    double? slidingPercentile,
    int? slidingWindowSize,
    int? maxFrameDropIntervalMs,
    bool? ignoreLoadTimeoutForFallback,
    int? serverBweMultiplier,
    int? drmMaxKeyfetchDelayMs,
    int? maxResolutionForWhiteNoise,
    String? whiteNoiseRenderEffectMode,
    bool? enableLibvpxHdr,
    bool? enableCacheAwareStreamSelection,
    bool? useExoCronetDataSource,
    int? whiteNoiseScale,
    int? whiteNoiseOffset,
    bool? preventVideoFrameLaggingWithLibvpx,
    bool? enableMediaCodecHdr,
    bool? enableMediaCodecSwHdr,
    int? liveOnlyWindowChunks,
    List<int>? bearerMinDurationToRetainAfterDiscardMs,
    bool? forceWidevineL3,
    bool? useAverageBitrate,
    bool? useMedialibAudioTrackRendererForLive,
    bool? useExoPlayerV2,
    bool? logMediaRequestEventsToCsi,
    bool? onesieFixNonZeroStartTimeFormatSelection,
    int? liveOnlyReadaheadStepSizeChunks,
    int? liveOnlyBufferHealthHalfLifeSeconds,
    double? liveOnlyMinBufferHealthRatio,
    int? liveOnlyMinLatencyToSeekRatio,
    String? manifestlessPartialChunkStrategy,
    bool? ignoreViewportSizeWhenSticky,
    bool? enableLibvpxFallback,
    bool? disableLibvpxLoopFilter,
    bool? enableVpxMediaView,
    int? hdrMinScreenBrightness,
    int? hdrMaxScreenBrightnessThreshold,
    bool? onesieDataSourceAboveCacheDataSource,
    int? httpNonplayerLoadTimeoutMs,
    String? numVideoSegmentsPerFetchStrategy,
    int? maxVideoDurationPerFetchMs,
    int? maxVideoEstimatedLoadDurationMs,
    int? estimatedServerClockHalfLife,
    bool? estimatedServerClockStrictOffset,
    int? minReadAheadMediaTimeMs,
    int? readAheadGrowthRate,
    bool? useDynamicReadAhead,
    bool? useYtVodMediaSourceForV2,
    bool? enableV2Gapless,
    bool? useLiveHeadTimeMillis,
    bool? allowTrackSelectionWithUpdatedVideoItagsForExoV2,
    int? maxAllowableTimeBeforeMediaTimeUpdateSec,
    bool? enableDynamicHdr,
    bool? v2PerformEarlyStreamSelection,
    bool? v2UsePlaybackStreamSelectionResult,
    int? v2MinTimeBetweenAbrReevaluationMs,
    bool? avoidReusePlaybackAcrossLoadvideos,
    bool? enableInfiniteNetworkLoadingRetries,
    bool? reportExoPlayerStateOnTransition,
    String? manifestlessSequenceMethod,
    bool? useLiveHeadWindow,
    bool? enableDynamicHdrInHardware,
    int? ultralowAudioQualityBandwidthThresholdBps,
    bool? retryLiveNetNocontentWithDelay,
    bool? ignoreUnneededSeeksToLiveHead,
    double? drmMetricsQoeLoggingFraction,
    int? liveNetNocontentMaximumErrors,
    int? slidingPercentileScalar,
    int? minAdaptiveVideoQuality,
    bool? retryLiveEmptyChunkWithDelay,
    int? platypusBackBufferDurationMs,
  }) = _ExoPlayerConfig;

  factory ExoPlayerConfig.fromJson(Map<String, dynamic> json) =>
      _$ExoPlayerConfigFromJson(json);
}
